// Copyright 2016 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Service exported by server reflection.  A more complete description of how
// server reflection works can be found at
// https://github.com/grpc/grpc/blob/master/doc/server-reflection.md
//
// The canonical version of this proto can be found at
// https://github.com/grpc/grpc-proto/blob/master/grpc/reflection/v1/reflection.proto

// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file v1/reflection.proto (package grpc.reflection.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file v1/reflection.proto.
 */
export const file_v1_reflection: GenFile = /*@__PURE__*/
  fileDesc("ChN2MS9yZWZsZWN0aW9uLnByb3RvEhJncnBjLnJlZmxlY3Rpb24udjEihQIKF1NlcnZlclJlZmxlY3Rpb25SZXF1ZXN0EgwKBGhvc3QYASABKAkSGgoQZmlsZV9ieV9maWxlbmFtZRgDIAEoCUgAEiAKFmZpbGVfY29udGFpbmluZ19zeW1ib2wYBCABKAlIABJJChlmaWxlX2NvbnRhaW5pbmdfZXh0ZW5zaW9uGAUgASgLMiQuZ3JwYy5yZWZsZWN0aW9uLnYxLkV4dGVuc2lvblJlcXVlc3RIABInCh1hbGxfZXh0ZW5zaW9uX251bWJlcnNfb2ZfdHlwZRgGIAEoCUgAEhcKDWxpc3Rfc2VydmljZXMYByABKAlIAEIRCg9tZXNzYWdlX3JlcXVlc3QiRQoQRXh0ZW5zaW9uUmVxdWVzdBIXCg9jb250YWluaW5nX3R5cGUYASABKAkSGAoQZXh0ZW5zaW9uX251bWJlchgCIAEoBSK4AwoYU2VydmVyUmVmbGVjdGlvblJlc3BvbnNlEhIKCnZhbGlkX2hvc3QYASABKAkSRQoQb3JpZ2luYWxfcmVxdWVzdBgCIAEoCzIrLmdycGMucmVmbGVjdGlvbi52MS5TZXJ2ZXJSZWZsZWN0aW9uUmVxdWVzdBJOChhmaWxlX2Rlc2NyaXB0b3JfcmVzcG9uc2UYBCABKAsyKi5ncnBjLnJlZmxlY3Rpb24udjEuRmlsZURlc2NyaXB0b3JSZXNwb25zZUgAElUKHmFsbF9leHRlbnNpb25fbnVtYmVyc19yZXNwb25zZRgFIAEoCzIrLmdycGMucmVmbGVjdGlvbi52MS5FeHRlbnNpb25OdW1iZXJSZXNwb25zZUgAEkkKFmxpc3Rfc2VydmljZXNfcmVzcG9uc2UYBiABKAsyJy5ncnBjLnJlZmxlY3Rpb24udjEuTGlzdFNlcnZpY2VSZXNwb25zZUgAEjsKDmVycm9yX3Jlc3BvbnNlGAcgASgLMiEuZ3JwYy5yZWZsZWN0aW9uLnYxLkVycm9yUmVzcG9uc2VIAEISChBtZXNzYWdlX3Jlc3BvbnNlIjcKFkZpbGVEZXNjcmlwdG9yUmVzcG9uc2USHQoVZmlsZV9kZXNjcmlwdG9yX3Byb3RvGAEgAygMIksKF0V4dGVuc2lvbk51bWJlclJlc3BvbnNlEhYKDmJhc2VfdHlwZV9uYW1lGAEgASgJEhgKEGV4dGVuc2lvbl9udW1iZXIYAiADKAUiSwoTTGlzdFNlcnZpY2VSZXNwb25zZRI0CgdzZXJ2aWNlGAEgAygLMiMuZ3JwYy5yZWZsZWN0aW9uLnYxLlNlcnZpY2VSZXNwb25zZSIfCg9TZXJ2aWNlUmVzcG9uc2USDAoEbmFtZRgBIAEoCSI6Cg1FcnJvclJlc3BvbnNlEhIKCmVycm9yX2NvZGUYASABKAUSFQoNZXJyb3JfbWVzc2FnZRgCIAEoCTKJAQoQU2VydmVyUmVmbGVjdGlvbhJ1ChRTZXJ2ZXJSZWZsZWN0aW9uSW5mbxIrLmdycGMucmVmbGVjdGlvbi52MS5TZXJ2ZXJSZWZsZWN0aW9uUmVxdWVzdBosLmdycGMucmVmbGVjdGlvbi52MS5TZXJ2ZXJSZWZsZWN0aW9uUmVzcG9uc2UoATABQmYKFWlvLmdycGMucmVmbGVjdGlvbi52MUIVU2VydmVyUmVmbGVjdGlvblByb3RvUAFaNGdvb2dsZS5nb2xhbmcub3JnL2dycGMvcmVmbGVjdGlvbi9ncnBjX3JlZmxlY3Rpb25fdjFiBnByb3RvMw");

/**
 * The message sent by the client when calling ServerReflectionInfo method.
 *
 * @generated from message grpc.reflection.v1.ServerReflectionRequest
 */
export type ServerReflectionRequest = Message<"grpc.reflection.v1.ServerReflectionRequest"> & {
  /**
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * To use reflection service, the client should set one of the following
   * fields in message_request. The server distinguishes requests by their
   * defined field and then handles them using corresponding methods.
   *
   * @generated from oneof grpc.reflection.v1.ServerReflectionRequest.message_request
   */
  messageRequest: {
    /**
     * Find a proto file by the file name.
     *
     * @generated from field: string file_by_filename = 3;
     */
    value: string;
    case: "fileByFilename";
  } | {
    /**
     * Find the proto file that declares the given fully-qualified symbol name.
     * This field should be a fully-qualified symbol name
     * (e.g. <package>.<service>[.<method>] or <package>.<type>).
     *
     * @generated from field: string file_containing_symbol = 4;
     */
    value: string;
    case: "fileContainingSymbol";
  } | {
    /**
     * Find the proto file which defines an extension extending the given
     * message type with the given field number.
     *
     * @generated from field: grpc.reflection.v1.ExtensionRequest file_containing_extension = 5;
     */
    value: ExtensionRequest;
    case: "fileContainingExtension";
  } | {
    /**
     * Finds the tag numbers used by all known extensions of the given message
     * type, and appends them to ExtensionNumberResponse in an undefined order.
     * Its corresponding method is best-effort: it's not guaranteed that the
     * reflection service will implement this method, and it's not guaranteed
     * that this method will provide all extensions. Returns
     * StatusCode::UNIMPLEMENTED if it's not implemented.
     * This field should be a fully-qualified type name. The format is
     * <package>.<type>
     *
     * @generated from field: string all_extension_numbers_of_type = 6;
     */
    value: string;
    case: "allExtensionNumbersOfType";
  } | {
    /**
     * List the full names of registered services. The content will not be
     * checked.
     *
     * @generated from field: string list_services = 7;
     */
    value: string;
    case: "listServices";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message grpc.reflection.v1.ServerReflectionRequest.
 * Use `create(ServerReflectionRequestSchema)` to create a new message.
 */
export const ServerReflectionRequestSchema: GenMessage<ServerReflectionRequest> = /*@__PURE__*/
  messageDesc(file_v1_reflection, 0);

/**
 * The type name and extension number sent by the client when requesting
 * file_containing_extension.
 *
 * @generated from message grpc.reflection.v1.ExtensionRequest
 */
export type ExtensionRequest = Message<"grpc.reflection.v1.ExtensionRequest"> & {
  /**
   * Fully-qualified type name. The format should be <package>.<type>
   *
   * @generated from field: string containing_type = 1;
   */
  containingType: string;

  /**
   * @generated from field: int32 extension_number = 2;
   */
  extensionNumber: number;
};

/**
 * Describes the message grpc.reflection.v1.ExtensionRequest.
 * Use `create(ExtensionRequestSchema)` to create a new message.
 */
export const ExtensionRequestSchema: GenMessage<ExtensionRequest> = /*@__PURE__*/
  messageDesc(file_v1_reflection, 1);

/**
 * The message sent by the server to answer ServerReflectionInfo method.
 *
 * @generated from message grpc.reflection.v1.ServerReflectionResponse
 */
export type ServerReflectionResponse = Message<"grpc.reflection.v1.ServerReflectionResponse"> & {
  /**
   * @generated from field: string valid_host = 1;
   */
  validHost: string;

  /**
   * @generated from field: grpc.reflection.v1.ServerReflectionRequest original_request = 2;
   */
  originalRequest?: ServerReflectionRequest;

  /**
   * The server sets one of the following fields according to the message_request
   * in the request.
   *
   * @generated from oneof grpc.reflection.v1.ServerReflectionResponse.message_response
   */
  messageResponse: {
    /**
     * This message is used to answer file_by_filename, file_containing_symbol,
     * file_containing_extension requests with transitive dependencies.
     * As the repeated label is not allowed in oneof fields, we use a
     * FileDescriptorResponse message to encapsulate the repeated fields.
     * The reflection service is allowed to avoid sending FileDescriptorProtos
     * that were previously sent in response to earlier requests in the stream.
     *
     * @generated from field: grpc.reflection.v1.FileDescriptorResponse file_descriptor_response = 4;
     */
    value: FileDescriptorResponse;
    case: "fileDescriptorResponse";
  } | {
    /**
     * This message is used to answer all_extension_numbers_of_type requests.
     *
     * @generated from field: grpc.reflection.v1.ExtensionNumberResponse all_extension_numbers_response = 5;
     */
    value: ExtensionNumberResponse;
    case: "allExtensionNumbersResponse";
  } | {
    /**
     * This message is used to answer list_services requests.
     *
     * @generated from field: grpc.reflection.v1.ListServiceResponse list_services_response = 6;
     */
    value: ListServiceResponse;
    case: "listServicesResponse";
  } | {
    /**
     * This message is used when an error occurs.
     *
     * @generated from field: grpc.reflection.v1.ErrorResponse error_response = 7;
     */
    value: ErrorResponse;
    case: "errorResponse";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message grpc.reflection.v1.ServerReflectionResponse.
 * Use `create(ServerReflectionResponseSchema)` to create a new message.
 */
export const ServerReflectionResponseSchema: GenMessage<ServerReflectionResponse> = /*@__PURE__*/
  messageDesc(file_v1_reflection, 2);

/**
 * Serialized FileDescriptorProto messages sent by the server answering
 * a file_by_filename, file_containing_symbol, or file_containing_extension
 * request.
 *
 * @generated from message grpc.reflection.v1.FileDescriptorResponse
 */
export type FileDescriptorResponse = Message<"grpc.reflection.v1.FileDescriptorResponse"> & {
  /**
   * Serialized FileDescriptorProto messages. We avoid taking a dependency on
   * descriptor.proto, which uses proto2 only features, by making them opaque
   * bytes instead.
   *
   * @generated from field: repeated bytes file_descriptor_proto = 1;
   */
  fileDescriptorProto: Uint8Array[];
};

/**
 * Describes the message grpc.reflection.v1.FileDescriptorResponse.
 * Use `create(FileDescriptorResponseSchema)` to create a new message.
 */
export const FileDescriptorResponseSchema: GenMessage<FileDescriptorResponse> = /*@__PURE__*/
  messageDesc(file_v1_reflection, 3);

/**
 * A list of extension numbers sent by the server answering
 * all_extension_numbers_of_type request.
 *
 * @generated from message grpc.reflection.v1.ExtensionNumberResponse
 */
export type ExtensionNumberResponse = Message<"grpc.reflection.v1.ExtensionNumberResponse"> & {
  /**
   * Full name of the base type, including the package name. The format
   * is <package>.<type>
   *
   * @generated from field: string base_type_name = 1;
   */
  baseTypeName: string;

  /**
   * @generated from field: repeated int32 extension_number = 2;
   */
  extensionNumber: number[];
};

/**
 * Describes the message grpc.reflection.v1.ExtensionNumberResponse.
 * Use `create(ExtensionNumberResponseSchema)` to create a new message.
 */
export const ExtensionNumberResponseSchema: GenMessage<ExtensionNumberResponse> = /*@__PURE__*/
  messageDesc(file_v1_reflection, 4);

/**
 * A list of ServiceResponse sent by the server answering list_services request.
 *
 * @generated from message grpc.reflection.v1.ListServiceResponse
 */
export type ListServiceResponse = Message<"grpc.reflection.v1.ListServiceResponse"> & {
  /**
   * The information of each service may be expanded in the future, so we use
   * ServiceResponse message to encapsulate it.
   *
   * @generated from field: repeated grpc.reflection.v1.ServiceResponse service = 1;
   */
  service: ServiceResponse[];
};

/**
 * Describes the message grpc.reflection.v1.ListServiceResponse.
 * Use `create(ListServiceResponseSchema)` to create a new message.
 */
export const ListServiceResponseSchema: GenMessage<ListServiceResponse> = /*@__PURE__*/
  messageDesc(file_v1_reflection, 5);

/**
 * The information of a single service used by ListServiceResponse to answer
 * list_services request.
 *
 * @generated from message grpc.reflection.v1.ServiceResponse
 */
export type ServiceResponse = Message<"grpc.reflection.v1.ServiceResponse"> & {
  /**
   * Full name of a registered service, including its package name. The format
   * is <package>.<service>
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grpc.reflection.v1.ServiceResponse.
 * Use `create(ServiceResponseSchema)` to create a new message.
 */
export const ServiceResponseSchema: GenMessage<ServiceResponse> = /*@__PURE__*/
  messageDesc(file_v1_reflection, 6);

/**
 * The error code and error message sent by the server when an error occurs.
 *
 * @generated from message grpc.reflection.v1.ErrorResponse
 */
export type ErrorResponse = Message<"grpc.reflection.v1.ErrorResponse"> & {
  /**
   * This field uses the error codes defined in grpc::StatusCode.
   *
   * @generated from field: int32 error_code = 1;
   */
  errorCode: number;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;
};

/**
 * Describes the message grpc.reflection.v1.ErrorResponse.
 * Use `create(ErrorResponseSchema)` to create a new message.
 */
export const ErrorResponseSchema: GenMessage<ErrorResponse> = /*@__PURE__*/
  messageDesc(file_v1_reflection, 7);

/**
 * @generated from service grpc.reflection.v1.ServerReflection
 */
export const ServerReflection: GenService<{
  /**
   * The reflection service is structured as a bidirectional stream, ensuring
   * all related requests go to a single server.
   *
   * @generated from rpc grpc.reflection.v1.ServerReflection.ServerReflectionInfo
   */
  serverReflectionInfo: {
    methodKind: "bidi_streaming";
    input: typeof ServerReflectionRequestSchema;
    output: typeof ServerReflectionResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_v1_reflection, 0);

